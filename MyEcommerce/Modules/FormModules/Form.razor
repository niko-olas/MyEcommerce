@page "/form"

@rendermode @(new InteractiveServerRenderMode(false))

@inject ItemService service;

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (item is null)
{
    <Grid Items="items" OnDetails="Detail" OnCreate="Create" OnDelete="Delete" />

}
else
{
    <Details Value="@item" OnCancel="Cancel" >
        <Filds>
            <div class="col-md-6">
                <label class="form-label">Summary</label>
                <InputText @bind-Value="item.Summary" class="form-control" />
                <ValidationMessage For="(() => item.Summary)" />
            </div>

            <div class="col-md-6">
                <label class="form-label">Date</label>
                <InputDate @bind-Value="item!.Date" class="form-control" />

            </div>
            <div class="col-md-6">
                <label class="form-label">Temperatura</label>
                <InputNumber @bind-Value="item!.TemperatureC" class="form-control" />
                <ValidationMessage For="(() => item.TemperatureC)" />

            </div>
        </Filds>
    </Details>

}



@code {
    private List<Item>? items = null;

    private Item? item = null;


    protected override async Task OnInitializedAsync()
    {
        items = await service.GetData();
    }

    private void Detail(Item item)
    {
        this.item = item;
    }


    private void Delete(Item item)
    {
        items!.Remove(item);
        this.item = null;
    }

    private void Cancel()
    {
        this.item = null;
    }

    private void Save(Item item)
    {
        items!.Add(item);

        this.item = null;
    }

    private void Create()
    {
        this.item = new Item();
    }
}
